{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","event","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b76c589.chunk.js","sourcesContent":["import { extendObservable} from \"mobx\";\r\n\r\n/*\r\n UserStore\r\n */\r\n\r\nclass UserStore {\r\n    constructor() {\r\n        extendObservable(this, {\r\n            loading : true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\n\n\nclass InputField extends React.Component {\n    render() {\n        return (\n            <div className=\"inputField\">\n\n               <input\n                   className='input'\n                   type={this.props.type}\n                   placeholder={this.props.placeholder}\n                   value={this.props.value}\n                   onChange={ (event) => this.props.onChange(event.target.value) }\n               />\n\n            </div>\n        )\n    }\n}\n\n\n\nexport default InputField;\n","import React from 'react';\n\n\nclass SubmitButton extends React.Component {\n    render() {\n        return (\n            <div className=\"inputField\">\n                <button\n                    className='btn'\n                    disabled={this.props.disabled}\n                    onClick={ () => this.props.onClick() }\n                >\n                    {this.props.text}\n\n                    </button>\n            </div>\n        )\n    }\n}\n\n\n\nexport default SubmitButton;\n","import React from 'react';\nimport InputField from \"./InputField\";\nimport SubmitButton from \"./SubmitButton\";\nimport UserStore from \"./stores/UserStore\";\n\nclass LoginForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false // To prevent spam\n        }\n    }\n\n    setInputValue(property, val) {\n        val = val.trim()\n        if (val.length > 12) {\n            return\n        }\n        this.setState({\n            [property]: val\n        })\n    }\n\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: 'false'\n        })\n    }\n\n    async doLogin() {\n\n        if (!this.state.username) {\n            return\n        }\n        if (!this.state.password) {\n            return\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n\n        try {\n            let res = await fetch('/login', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            let result = await res.json()\n            if (result && result.success) {\n                UserStore.isLoggedIn = true\n                UserStore.username = result.username\n            }\n\n            else if (result && result.success === false) {\n                this.resetForm()\n                alert(result.msg)\n            }\n        }\n\n        catch(e) {\n            console.log(e)\n            this.resetForm()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"loginForm\">\n                Log in\n                <InputField\n                    type='text'\n                    placeholder='Username'\n                    value={this.state.username ? this.state.username : ''}\n                    onChange={ (val) => this.setInputValue('username', val) }\n                />\n\n                <InputField\n                    type='password'\n                    placeholder='Password'\n                    value={this.state.password ? this.state.password : ''}\n                    onChange={ (val) => this.setInputValue('password', val) }\n                />\n\n                <SubmitButton\n                    text='Login'\n                    disabled={this.state.buttonDisabled}\n                    onClick={ () => this.doLogin()}\n                />\n\n            </div>\n        )\n    }\n}\n\n\n\nexport default LoginForm;\n","import React from 'react';\nimport { observer } from \"mobx-react\";\nimport UserStore from \"./stores/UserStore\";\nimport LoginForm from \"./LoginForm\";\nimport SubmitButton from \"./SubmitButton\";\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n    async componentDidMount() { // When component loaded check is user logged in\n        try {\n            let res = await fetch('/isLoggedIn', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n\n            let result = await res.json()\n\n            if (result && result.success) { // Deal with the result of the request\n                UserStore.loading = false\n                UserStore.isLoggedIn = true\n                UserStore.username = result.username\n            }\n\n            else {\n                UserStore.loading = false\n                UserStore.isLoggedIn = false\n            }\n\n        }\n\n        catch (e) {\n            UserStore.loading = false\n            UserStore.isLoggedIn = false\n        }\n    }\n\n    async doLogout() { // When component loaded check is user logged in\n\n        try {\n\n            let res = await fetch('/logout', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n\n            let result = await res.json()\n\n            if (result && result.success) { // Deal with the result of the request\n                UserStore.isLoggedIn = false\n                UserStore.username = ''\n            }\n\n        }\n\n        catch (e) {\n           console.log(e)\n        }\n    }\n\n\n    render() {\n\n        if (UserStore.loading) {\n            return (\n                <div className=\"app\">\n                    <div className=\"container\">\n                        Loading, please wait..\n                    </div>\n                </div>\n            )\n        }\n\n        else {\n\n            if (UserStore.isLoggedIn) {\n                return (\n                    <div className=\"app\">\n                        <div className=\"container\">\n                            Welcome {UserStore.username}\n\n                            <SubmitButton\n                                text={'Log out'}\n                                disabled={false}\n                                onClick={ () => this.doLogout() }\n                                />\n\n                        </div>\n                    </div>\n                )\n            }\n\n        }\n\n        return (\n            <div className=\"app\">\n                <div className=\"container\">\n                    <LoginForm />\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default observer(App); // So the App listen to changes in the UserStore\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}